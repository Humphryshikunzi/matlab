function tests = baselineTests
% Run baseline comparison for models that belong to the project. As it is
% right now, only testFDIRModeLogicApp test point is run. This test point
% makes sure that the logic in the FDIRApp model does not deviate from a
% fixed baseline. Extra test cases can be added by appending local
% functions to this test file. See an example test point in myTestCaseHere.

% Copyright 2014-2016 The MathWorks, Inc.

tests = functiontests(localfunctions);

end

function testFDIRModeLogicApp(testCase)
% This test point compares the SLDV harness model for FDIRModeLogicApp
% against the baseline generated by SLDV also. 

% Use Simulink Project API to get the current project:
p = slproject.getCurrentProject;

% Get the project root folder:
projectRoot = p.RootFolder;

% Model Name
modelName = 'asbhl20_FDIRmodelogicApp';

% Define test model
testModel = [modelName '_harness'];
testModelPath = fullfile(projectRoot,'tests',modelName,testModel);
baselineFilePath = [testModelPath '_baseline'];

% Load model
load_system(testModelPath);

% Load baseline
load(baselineFilePath);

% Set output variable name
set_param(testModel,'OutputSaveName','actual');

% Simulate model
sim(testModel);
close_system(testModel,0);

% Expected results
expected = eval([testModel 'Output']);

% Compare baseline for each logged output
for k=1:length(expected.signals)
    testCase.verifyEqual(actual.signals(k).values,expected.signals(k).values);
end

end

% function myTestCaseHere(testCase)
% % This is an example test point to illustrate how a model can be tested
% % against a baseline.
%
% % Open the model
% open_system(myModel);
%
% % Simulate the model
% actual = sim(myModel);
%
% % Load baseline
% expected = load('myBaselineForMyModel');
%
% % Verify that the simulated results and the baseline are the same
% verifyEqual(testCase,actual,expected);
% end
